const data = JSON.parse('{"key":"v-53d3c581","path":"/codenotes/framework/MicroServices/SpringCloud02.html","title":"微服务2","lang":"zh-CN","frontmatter":{"title":"微服务2","icon":"write","category":["SpringCloud","微服务"],"tag":["序列化","参数调优","RPC框架"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"SpringCloud02 by九牧 0. 学习目标 1. Nacos配置管理 Nacos 除了可以做注册中心，同样可以做配置管理来使用 1.1 统一配置管理 当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错，所以我们需要一种统一配置管理方案，可以集中管理所有实例的配置","head":[["meta",{"property":"og:url","content":"http://localhost:8080/jmcoding/jmcoding/codenotes/framework/MicroServices/SpringCloud02.html"}],["meta",{"property":"og:site_name","content":"九牧の学习笔记"}],["meta",{"property":"og:title","content":"微服务2"}],["meta",{"property":"og:description","content":"SpringCloud02 by九牧 0. 学习目标 1. Nacos配置管理 Nacos 除了可以做注册中心，同样可以做配置管理来使用 1.1 统一配置管理 当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错，所以我们需要一种统一配置管理方案，可以集中管理所有实例的配置"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-26T06:20:30.000Z"}],["meta",{"property":"article:tag","content":"序列化"}],["meta",{"property":"article:tag","content":"参数调优"}],["meta",{"property":"article:tag","content":"RPC框架"}],["meta",{"property":"article:modified_time","content":"2023-01-26T06:20:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"微服务2\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-26T06:20:30.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.1 统一配置管理","slug":"_1-1-统一配置管理","link":"#_1-1-统一配置管理","children":[{"level":3,"title":"1.1.1 在nacos中添加配置文件","slug":"_1-1-1-在nacos中添加配置文件","link":"#_1-1-1-在nacos中添加配置文件","children":[]},{"level":3,"title":"1.1.2 从微服务拉取配置","slug":"_1-1-2-从微服务拉取配置","link":"#_1-1-2-从微服务拉取配置","children":[]}]},{"level":2,"title":"1.2 配置热更新","slug":"_1-2-配置热更新","link":"#_1-2-配置热更新","children":[{"level":3,"title":"1.2.1 方式一","slug":"_1-2-1-方式一","link":"#_1-2-1-方式一","children":[]},{"level":3,"title":"1.2.2 方式二","slug":"_1-2-2-方式二","link":"#_1-2-2-方式二","children":[]}]},{"level":2,"title":"1.3 配置共享","slug":"_1-3-配置共享","link":"#_1-3-配置共享","children":[{"level":3,"title":"1、添加一个环境共享配置","slug":"_1、添加一个环境共享配置","link":"#_1、添加一个环境共享配置","children":[]},{"level":3,"title":"2、在user-service中读取共享配置","slug":"_2、在user-service中读取共享配置","link":"#_2、在user-service中读取共享配置","children":[]},{"level":3,"title":"3、运行两个UserApplication，使用不同的profile","slug":"_3、运行两个userapplication-使用不同的profile","link":"#_3、运行两个userapplication-使用不同的profile","children":[]},{"level":3,"title":"4、配置共享的优先级","slug":"_4、配置共享的优先级","link":"#_4、配置共享的优先级","children":[]}]},{"level":2,"title":"1.4 搭建Nacos集群","slug":"_1-4-搭建nacos集群","link":"#_1-4-搭建nacos集群","children":[]},{"level":2,"title":"2.1 Feign替代RestTemplate","slug":"_2-1-feign替代resttemplate","link":"#_2-1-feign替代resttemplate","children":[{"level":3,"title":"1、引入依赖","slug":"_1、引入依赖","link":"#_1、引入依赖","children":[]},{"level":3,"title":"2、添加注解","slug":"_2、添加注解","link":"#_2、添加注解","children":[]},{"level":3,"title":"3、编写Feign的客户端","slug":"_3、编写feign的客户端","link":"#_3、编写feign的客户端","children":[]},{"level":3,"title":"4、测试","slug":"_4、测试","link":"#_4、测试","children":[]},{"level":3,"title":"5、总结","slug":"_5、总结","link":"#_5、总结","children":[]}]},{"level":2,"title":"2.2 自定义配置","slug":"_2-2-自定义配置","link":"#_2-2-自定义配置","children":[{"level":3,"title":"2.2.1 配置文件方式","slug":"_2-2-1-配置文件方式","link":"#_2-2-1-配置文件方式","children":[]},{"level":3,"title":"2.2.2 Java代码方式","slug":"_2-2-2-java代码方式","link":"#_2-2-2-java代码方式","children":[]}]},{"level":2,"title":"2.3 Feign使用优化","slug":"_2-3-feign使用优化","link":"#_2-3-feign使用优化","children":[]},{"level":2,"title":"2.4 最佳实践","slug":"_2-4-最佳实践","link":"#_2-4-最佳实践","children":[{"level":3,"title":"2.4.1 继承方式","slug":"_2-4-1-继承方式","link":"#_2-4-1-继承方式","children":[]},{"level":3,"title":"2.4.2 抽取方式","slug":"_2-4-2-抽取方式","link":"#_2-4-2-抽取方式","children":[]},{"level":3,"title":"2.4.3 实现基于抽取的最佳实践","slug":"_2-4-3-实现基于抽取的最佳实践","link":"#_2-4-3-实现基于抽取的最佳实践","children":[]}]},{"level":2,"title":"3.1 为什么需要网关","slug":"_3-1-为什么需要网关","link":"#_3-1-为什么需要网关","children":[]},{"level":2,"title":"3.2 gateway快速入门","slug":"_3-2-gateway快速入门","link":"#_3-2-gateway快速入门","children":[{"level":3,"title":"1、创建gateway服务，引入依赖","slug":"_1、创建gateway服务-引入依赖","link":"#_1、创建gateway服务-引入依赖","children":[]},{"level":3,"title":"2、编写启动类","slug":"_2、编写启动类","link":"#_2、编写启动类","children":[]},{"level":3,"title":"3、编写基础配置和路由规则","slug":"_3、编写基础配置和路由规则","link":"#_3、编写基础配置和路由规则","children":[]},{"level":3,"title":"4、重启测试","slug":"_4、重启测试","link":"#_4、重启测试","children":[]},{"level":3,"title":"5、网关路由的流程图","slug":"_5、网关路由的流程图","link":"#_5、网关路由的流程图","children":[]},{"level":3,"title":"6、总结","slug":"_6、总结","link":"#_6、总结","children":[]}]},{"level":2,"title":"3.3 断言工厂","slug":"_3-3-断言工厂","link":"#_3-3-断言工厂","children":[]},{"level":2,"title":"3.4 过滤器工厂","slug":"_3-4-过滤器工厂","link":"#_3-4-过滤器工厂","children":[{"level":3,"title":"3.4.1 路由过滤器的种类","slug":"_3-4-1-路由过滤器的种类","link":"#_3-4-1-路由过滤器的种类","children":[]},{"level":3,"title":"3.4.2 请求头过滤器","slug":"_3-4-2-请求头过滤器","link":"#_3-4-2-请求头过滤器","children":[]},{"level":3,"title":"3.4.3 默认过滤器","slug":"_3-4-3-默认过滤器","link":"#_3-4-3-默认过滤器","children":[]},{"level":3,"title":"3.4.4 总结","slug":"_3-4-4-总结","link":"#_3-4-4-总结","children":[]}]},{"level":2,"title":"3.5 全局过滤器","slug":"_3-5-全局过滤器","link":"#_3-5-全局过滤器","children":[{"level":3,"title":"3.5.1 全局过滤器作用","slug":"_3-5-1-全局过滤器作用","link":"#_3-5-1-全局过滤器作用","children":[]},{"level":3,"title":"3.5.2 自定义全局过滤器","slug":"_3-5-2-自定义全局过滤器","link":"#_3-5-2-自定义全局过滤器","children":[]},{"level":3,"title":"3.5.3 过滤器执行顺序","slug":"_3-5-3-过滤器执行顺序","link":"#_3-5-3-过滤器执行顺序","children":[]}]},{"level":2,"title":"3.6 跨域问题","slug":"_3-6-跨域问题","link":"#_3-6-跨域问题","children":[{"level":3,"title":"3.6.1 什么是跨域问题","slug":"_3-6-1-什么是跨域问题","link":"#_3-6-1-什么是跨域问题","children":[]},{"level":3,"title":"3.6.2 模拟跨域问题","slug":"_3-6-2-模拟跨域问题","link":"#_3-6-2-模拟跨域问题","children":[]},{"level":3,"title":"3.6.3 解决跨域问题","slug":"_3-6-3-解决跨域问题","link":"#_3-6-3-解决跨域问题","children":[]}]}],"git":{"createdTime":1674714030000,"updatedTime":1674714030000,"contributors":[{"name":"xiaoke","email":"yjmqaz@126.com","commits":1}]},"readingTime":{"minutes":19.93,"words":5978},"filePathRelative":"codenotes/framework/MicroServices/SpringCloud02.md","localizedDate":"2023年1月26日","excerpt":"<h1> SpringCloud02</h1>\\n<blockquote>\\n<p>by九牧</p>\\n</blockquote>\\n<h1> 0. 学习目标</h1>\\n<h1> 1. Nacos配置管理</h1>\\n<blockquote>\\n<p><code>Nacos</code> 除了可以做注册中心，同样可以做配置管理来使用</p>\\n</blockquote>\\n<h2> 1.1 统一配置管理</h2>\\n<blockquote>\\n<p>当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错，所以我们需要一种统一配置管理方案，可以集中管理所有实例的配置</p>\\n</blockquote>","autoDesc":true}');
export {
  data
};
