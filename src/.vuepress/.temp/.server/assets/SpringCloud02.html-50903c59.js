import { resolveComponent, useSSRContext } from "vue";
import { ssrRenderAttrs, ssrRenderComponent } from "vue/server-renderer";
import { _ as _export_sfc } from "./plugin-vue_export-helper-cc2b3d55.js";
const _sfc_main = {};
function _sfc_ssrRender(_ctx, _push, _parent, _attrs) {
  const _component_ExternalLinkIcon = resolveComponent("ExternalLinkIcon");
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="springcloud02" tabindex="-1"><a class="header-anchor" href="#springcloud02" aria-hidden="true">#</a> SpringCloud02</h1><blockquote><p>by九牧</p></blockquote><h1 id="_0-学习目标" tabindex="-1"><a class="header-anchor" href="#_0-学习目标" aria-hidden="true">#</a> 0. 学习目标</h1><h1 id="_1-nacos配置管理" tabindex="-1"><a class="header-anchor" href="#_1-nacos配置管理" aria-hidden="true">#</a> 1. Nacos配置管理</h1><blockquote><p><code>Nacos</code> 除了可以做注册中心，同样可以做配置管理来使用</p></blockquote><h2 id="_1-1-统一配置管理" tabindex="-1"><a class="header-anchor" href="#_1-1-统一配置管理" aria-hidden="true">#</a> 1.1 统一配置管理</h2><blockquote><p>当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错，所以我们需要一种统一配置管理方案，可以集中管理所有实例的配置</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714164426792.png" alt="image-20210714164426792"></p><blockquote><p><code>Nacos</code> 一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的热更新</p></blockquote><h3 id="_1-1-1-在nacos中添加配置文件" tabindex="-1"><a class="header-anchor" href="#_1-1-1-在nacos中添加配置文件" aria-hidden="true">#</a> 1.1.1 在nacos中添加配置文件</h3><p>如何在 <code>nacos</code> 中管理配置呢？</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714164742924.png" alt="image-20210714164742924"></p><p>然后在弹出的表单中，填写配置信息：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714164856664.png" alt="image-20210714164856664"></p><blockquote><p><strong>注意</strong>：项目的核心配置，需要热更新的配置才有放到 <code>nacos</code> 管理的必要，基本不会变更的一些配置还是保存在微服务本地比较好</p></blockquote><h3 id="_1-1-2-从微服务拉取配置" tabindex="-1"><a class="header-anchor" href="#_1-1-2-从微服务拉取配置" aria-hidden="true">#</a> 1.1.2 从微服务拉取配置</h3><blockquote><p>微服务要拉取 <code>nacos</code> 中管理的配置，并且与本地的 <code>application.yml</code> 配置合并，才能完成项目启动。但如果尚未读取 <code>application.yml</code>，又如何得知 <code>nacos</code> 地址呢？</p><p>因此 <code>Spring</code> 引入了一种新的配置文件：<code>bootstrap.yaml</code> 文件，会在 <code>application.yml</code> 之前被读取，流程如下：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/L0iFYNF.png" alt="img"></p></blockquote><h4 id="_1、引入nacos-config依赖" tabindex="-1"><a class="header-anchor" href="#_1、引入nacos-config依赖" aria-hidden="true">#</a> 1、引入nacos-config依赖</h4><p>首先，在 <code>user-service</code> 服务中，引入 <code>nacos-config</code> 的客户端依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--nacos配置管理依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、添加bootstrap-yaml" tabindex="-1"><a class="header-anchor" href="#_2、添加bootstrap-yaml" aria-hidden="true">#</a> 2、添加bootstrap.yaml</h4><p>然后，在 <code>user-service</code> 中添加一个 <code>bootstrap.yaml</code> 文件，内容如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> userservice <span class="token comment"># 服务名称</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev <span class="token comment">#开发环境，这里是dev </span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># Nacos地址</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment"># 文件后缀名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里会根据 <code>spring.cloud.nacos.server-addr</code> 获取 <code>nacos</code> 地址，再根据<code>\${spring.application.name}-\${spring.profiles.active}.\${spring.cloud.nacos.config.file-extension}</code> 作为文件id，来读取配置</p><p><strong>注意</strong>：最好是删除或者注释掉 <code>application.yml</code> 配置文件中的相同内容</p></blockquote><p>本例中，就是去读取 <code>userservice-dev.yaml</code>：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714170845901.png" alt="image-20210714170845901"></p><h4 id="_3、读取nacos配置" tabindex="-1"><a class="header-anchor" href="#_3、读取nacos配置" aria-hidden="true">#</a> 3、读取nacos配置</h4><p>在 <code>user-service</code> 中的 <code>UserController</code> 中添加业务逻辑，读取 <code>pattern.dateformat</code> 配置：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20230123204025921.png" alt="image-20230123204025921"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 完整代码</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jmcoding<span class="token punctuation">.</span>user<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>jmcoding<span class="token punctuation">.</span>user<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>jmcoding<span class="token punctuation">.</span>user<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span><span class="token class-name">DateTimeFormatter</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${pattern.dateformat}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> dateformat<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;now&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span>dateformat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ...略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在页面访问，可以看到效果：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20230123204116607.png" alt="image-20230123204116607"></p></blockquote><h2 id="_1-2-配置热更新" tabindex="-1"><a class="header-anchor" href="#_1-2-配置热更新" aria-hidden="true">#</a> 1.2 配置热更新</h2><blockquote><p>我们最终的目的，是修改 <code>nacos</code> 中的配置后，微服务中无需重启即可让配置生效，也就是<strong>配置热更新</strong>，要实现配置热更新，可以使用两种方式</p></blockquote><h3 id="_1-2-1-方式一" tabindex="-1"><a class="header-anchor" href="#_1-2-1-方式一" aria-hidden="true">#</a> 1.2.1 方式一</h3><p>在 <code>@Value</code> 注入的变量所在类上添加注解 <code>@RefreshScope</code>：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714171036335.png" alt="image-20210714171036335"></p><h3 id="_1-2-2-方式二" tabindex="-1"><a class="header-anchor" href="#_1-2-2-方式二" aria-hidden="true">#</a> 1.2.2 方式二</h3><p>使用 <code>@ConfigurationProperties</code> 注解代替 <code>@Value</code> 注解。</p><p>在 <code>user-service</code> 服务中，添加一个类，读取 <code>patterrn.dateformat</code> 属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jmcoding<span class="token punctuation">.</span>user<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;pattern&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PatternProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> dateformat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>UserController</code> 中使用这个类代替 <code>@Value</code>：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714171316124.png" alt="image-20210714171316124"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 完整代码</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jmcoding<span class="token punctuation">.</span>user<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>jmcoding<span class="token punctuation">.</span>user<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">PatternProperties</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>jmcoding<span class="token punctuation">.</span>user<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>jmcoding<span class="token punctuation">.</span>user<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>context<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RefreshScope</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span><span class="token class-name">DateTimeFormatter</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">PatternProperties</span> patternProperties<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;now&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span>patternProperties<span class="token punctuation">.</span><span class="token function">getDateformat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-3-配置共享" tabindex="-1"><a class="header-anchor" href="#_1-3-配置共享" aria-hidden="true">#</a> 1.3 配置共享</h2><blockquote><p>其实微服务启动时，会去 <code>nacos</code> 读取多个配置文件，例如：</p><ul><li><code>[spring.application.name]-[spring.profiles.active].yaml</code>，如：<code>userservice-dev.yaml</code></li><li><code>[spring.application.name].yaml</code>，如：<code>userservice.yaml</code></li></ul><p>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享（下面我们通过案例来测试配置共享）</p></blockquote><h3 id="_1、添加一个环境共享配置" tabindex="-1"><a class="header-anchor" href="#_1、添加一个环境共享配置" aria-hidden="true">#</a> 1、添加一个环境共享配置</h3><p>我们在 <code>nacos</code> 中添加一个 <code>userservice.yaml</code> 文件：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714173233650.png" alt="image-20210714173233650"></p><blockquote><p>上面的 <code>envSharedValue</code> 的值没什么特殊含义，就是为了测试</p></blockquote><h3 id="_2、在user-service中读取共享配置" tabindex="-1"><a class="header-anchor" href="#_2、在user-service中读取共享配置" aria-hidden="true">#</a> 2、在user-service中读取共享配置</h3><p>在 <code>user-service</code> 服务中，修改 <code>PatternProperties</code> 类，读取新添加的属性：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714173324231.png" alt="image-20210714173324231"></p><p>在 <code>user-service</code> 服务中，修改 <code>UserController</code>，添加一个方法：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20230123211159895.png" alt="image-20230123211159895"></p><h3 id="_3、运行两个userapplication-使用不同的profile" tabindex="-1"><a class="header-anchor" href="#_3、运行两个userapplication-使用不同的profile" aria-hidden="true">#</a> 3、运行两个UserApplication，使用不同的profile</h3><p>修改 <code>UserApplication2</code> 这个启动项，改变其 <code>profile</code> 值：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714173538538.png" alt="image-20210714173538538"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714173519963.png" alt="image-20210714173519963"></p><blockquote><p>这样，<code>UserApplication(8081)</code> 使用的 <code>profile</code> 是 <code>dev</code>，<code>UserApplication2(8082)</code> 使用的 <code>profile</code> 是<code>test</code></p><p><strong>启动前</strong>记得把 <code>UserController</code> 中的 <code>dateformat</code> 进行注释，因为使用 <code>UserApplication2(8082)</code> 进行访问时会报错（找不到 <code>dateformat</code> 的值）</p></blockquote><p>启动 <code>UserApplication</code> 和 <code>UserApplication2</code>，访问<a href="http://localhost:8081/user/prop%EF%BC%8C%E7%BB%93%E6%9E%9C%EF%BC%9A" target="_blank" rel="noopener noreferrer">http://localhost:8081/user/prop，结果：`);
  _push(ssrRenderComponent(_component_ExternalLinkIcon, null, null, _parent));
  _push(`</a></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20230123211607466.png" alt="image-20230123211607466"></p><p>访问<a href="http://localhost:8082/user/prop%EF%BC%8C%E7%BB%93%E6%9E%9C%EF%BC%9A" target="_blank" rel="noopener noreferrer">http://localhost:8082/user/prop，结果：`);
  _push(ssrRenderComponent(_component_ExternalLinkIcon, null, null, _parent));
  _push(`</a></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20230123211617922.png" alt="image-20230123211617922"></p><p>可以看出来，不管是 <code>dev</code>，还是 <code>test</code> 环境，都读取到了 <code>envSharedValue</code> 这个属性的值。</p><h3 id="_4、配置共享的优先级" tabindex="-1"><a class="header-anchor" href="#_4、配置共享的优先级" aria-hidden="true">#</a> 4、配置共享的优先级</h3><p>当 <code>nacos</code>、服务本地同时出现相同属性时，优先级有高低之分：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714174623557.png" alt="image-20210714174623557"></p><h2 id="_1-4-搭建nacos集群" tabindex="-1"><a class="header-anchor" href="#_1-4-搭建nacos集群" aria-hidden="true">#</a> 1.4 搭建Nacos集群</h2><p><code>Nacos</code> 生产环境下一定要部署为集群状态，部署方式参考课前资料中的文档：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714174728042.png" alt="image-20210714174728042"></p><h1 id="_2-feign远程调用" tabindex="-1"><a class="header-anchor" href="#_2-feign远程调用" aria-hidden="true">#</a> 2. Feign远程调用</h1><p>先来看我们以前利用 <code>RestTemplate</code> 发起远程调用的代码：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714174814204.png" alt="image-20210714174814204"></p><p>存在下面的问题：</p><ul><li><p>代码可读性差，编程体验不统一</p></li><li><p>参数复杂 <code>URL</code> 难以维护</p></li></ul><blockquote><p>而<code>Feign</code> 是一个声明式的 <code>http</code> 客户端，官方地址：<a href="https://github.com/OpenFeign/feign%EF%BC%8C%E5%85%B6%E4%BD%9C%E7%94%A8%E5%B0%B1%E6%98%AF%E5%B8%AE%E5%8A%A9%E6%88%91%E4%BB%AC%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%9E%E7%8E%B0" target="_blank" rel="noopener noreferrer">https://github.com/OpenFeign/feign，其作用就是帮助我们优雅的实现`);
  _push(ssrRenderComponent(_component_ExternalLinkIcon, null, null, _parent));
  _push(`</a> <code>http</code> 请求的发送，解决上面提到的问题。</p></blockquote><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714174918088.png" alt="image-20210714174918088"></p><h2 id="_2-1-feign替代resttemplate" tabindex="-1"><a class="header-anchor" href="#_2-1-feign替代resttemplate" aria-hidden="true">#</a> 2.1 Feign替代RestTemplate</h2><blockquote><p><code>Fegin</code> 的使用步骤如下</p></blockquote><h3 id="_1、引入依赖" tabindex="-1"><a class="header-anchor" href="#_1、引入依赖" aria-hidden="true">#</a> 1、引入依赖</h3><p>我们在 <code>order-service</code> 服务的 <code>pom</code> 文件中引入 <code>feign</code> 的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、添加注解" tabindex="-1"><a class="header-anchor" href="#_2、添加注解" aria-hidden="true">#</a> 2、添加注解</h3><p>在 <code>order-service</code> 的启动类添加注解开启 <code>Feign</code> 的功能：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20230123213657520.png" alt="image-20230123213657520"></p><h3 id="_3、编写feign的客户端" tabindex="-1"><a class="header-anchor" href="#_3、编写feign的客户端" aria-hidden="true">#</a> 3、编写Feign的客户端</h3><p>在 <code>order-service</code> 中新建一个接口，内容如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jmcoding<span class="token punctuation">.</span>order<span class="token punctuation">.</span>client</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>jmcoding<span class="token punctuation">.</span>order<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span></span><span class="token class-name">FeignClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">&quot;userservice&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserClient</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个客户端主要是基于 <code>SpringMVC</code> 的注解来声明远程调用的信息，比如：</p><ul><li>服务名称：<code>userservice</code></li><li>请求方式：<code>GET</code></li><li>请求路径：<code>/user/{id}</code></li><li>请求参数：<code>Long id</code></li><li>返回值类型：<code>User</code></li></ul><p>这样，<code>Feign</code> 就可以帮助我们发送 <code>http</code> 请求，无需自己使用 <code>RestTemplate</code> 来发送了。</p><h3 id="_4、测试" tabindex="-1"><a class="header-anchor" href="#_4、测试" aria-hidden="true">#</a> 4、测试</h3><p>修改 <code>order-service</code> 中的 <code>OrderService</code> 类中的 <code>queryOrderById</code> 方法，使用 <code>Feign</code> 客户端代替 <code>RestTemplate</code>：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20230123214611447.png" alt="image-20230123214611447"></p><blockquote><p>是不是看起来优雅多了🤩</p></blockquote><h3 id="_5、总结" tabindex="-1"><a class="header-anchor" href="#_5、总结" aria-hidden="true">#</a> 5、总结</h3><blockquote><p>使用 <code>Feign</code> 的步骤：</p><p>① 引入依赖</p><p>② 添加 <code>@EnableFeignClients</code> 注解</p><p>③ 编写 <code>FeignClient</code> 接口</p><p>④ 使用 <code>FeignClient</code> 中定义的方法代替 <code>RestTemplate</code></p></blockquote><h2 id="_2-2-自定义配置" tabindex="-1"><a class="header-anchor" href="#_2-2-自定义配置" aria-hidden="true">#</a> 2.2 自定义配置</h2><p><code>Feign</code> 可以支持很多的自定义配置，如下表所示：</p><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><strong>feign.Logger.Level</strong></td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>feign. Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign. Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table><blockquote><p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的 <code>@Bean</code> 覆盖默认 <code>Bean</code> 即可</p></blockquote><p>下面以日志为例来演示如何自定义配置</p><h3 id="_2-2-1-配置文件方式" tabindex="-1"><a class="header-anchor" href="#_2-2-1-配置文件方式" aria-hidden="true">#</a> 2.2.1 配置文件方式</h3><p>基于配置文件修改 <code>feign</code> 的日志级别可以针对单个服务：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>  
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span> 
      <span class="token key atrule">userservice</span><span class="token punctuation">:</span> <span class="token comment"># 针对某个微服务的配置</span>
        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> FULL <span class="token comment">#  日志级别 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以针对所有服务：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>  
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span> 
      <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span>
        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> FULL <span class="token comment">#  日志级别 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而日志的级别分为四种：</p><ul><li><code>NONE</code>：不记录任何日志信息，这是默认值。</li><li><code>BASIC</code>：仅记录请求的方法，<code>URL</code> 以及响应状态码和执行时间</li><li><code>HEADERS</code>：在 <code>BASIC</code> 的基础上，额外记录了请求和响应的头信息</li><li><code>FULL</code>：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul><h3 id="_2-2-2-java代码方式" tabindex="-1"><a class="header-anchor" href="#_2-2-2-java代码方式" aria-hidden="true">#</a> 2.2.2 Java代码方式</h3><p>也可以基于 <code>Java</code> 代码来修改日志级别，先声明一个类，然后声明一个 <code>Logger.Level</code> 的对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultFeignConfiguration</span>  <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">feignLogLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span><span class="token constant">BASIC</span><span class="token punctuation">;</span> <span class="token comment">// 日志级别为BASIC</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要<strong>全局生效</strong>，将其放到启动类的 <code>@EnableFeignClients</code> 这个注解中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>defaultConfiguration <span class="token operator">=</span> <span class="token class-name">DefaultFeignConfiguration</span> <span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是<strong>局部生效</strong>，则把它放到对应的 <code>@FeignClient</code> 这个注解中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userservice&quot;</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> <span class="token class-name">DefaultFeignConfiguration</span> <span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-3-feign使用优化" tabindex="-1"><a class="header-anchor" href="#_2-3-feign使用优化" aria-hidden="true">#</a> 2.3 Feign使用优化</h2><blockquote><p><code>Feign</code> 底层发起 <code>http</code> 请求，依赖于其它的框架，其底层客户端实现包括：</p><ul><li><code>URLConnection</code>：默认实现，不支持连接池</li><li><code>Apache HttpClient</code> ：支持连接池</li><li><code>OKHttp</code>：支持连接池</li></ul></blockquote><p>因此提高 <code>Feign</code> 的性能主要手段就是使用<strong>连接池</strong>代替默认的 <code>URLConnection</code>， 这里我们用 <code>Apache</code> 的<code>HttpClient</code> 来演示。</p><h4 id="_1、引入依赖-1" tabindex="-1"><a class="header-anchor" href="#_1、引入依赖-1" aria-hidden="true">#</a> 1、引入依赖</h4><p>在 <code>order-service</code> 的 <code>pom</code> 文件中引入 <code>Apache</code> 的 <code>HttpClient</code> 依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--httpClient的依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、配置连接池" tabindex="-1"><a class="header-anchor" href="#_2、配置连接池" aria-hidden="true">#</a> 2、配置连接池</h4><p>在 <code>order-service</code> 的 <code>application.yml</code> 中添加配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token comment"># default全局的配置</span>
        <span class="token key atrule">loggerLevel</span><span class="token punctuation">:</span> BASIC <span class="token comment"># 日志级别，BASIC就是基本的请求和响应信息</span>
  <span class="token key atrule">httpclient</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启feign对HttpClient的支持</span>
    <span class="token key atrule">max-connections</span><span class="token punctuation">:</span> <span class="token number">200</span> <span class="token comment"># 最大的连接数</span>
    <span class="token key atrule">max-connections-per-route</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment"># 每个路径的最大连接数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，在 <code>FeignClientFactoryBean</code> 中的 <code>loadBalance</code> 方法中打断点：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714185925910.png" alt="image-20210714185925910"></p><p><code>Debug</code> 方式启动 <code>order-service</code> 服务，可以看到这里的 <code>client</code>，底层就是 <code>Apache HttpClient</code>：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714190041542.png" alt="image-20210714190041542"></p><h4 id="_3、总结" tabindex="-1"><a class="header-anchor" href="#_3、总结" aria-hidden="true">#</a> 3、总结</h4><p><code>Feign</code> 的优化：</p><ol><li><p>日志级别尽量用 <code>basic</code></p></li><li><p>使用 <code>HttpClient</code> 或 <code>OKHttp</code> 代替 <code>URLConnection</code></p><ol><li>引入 <code>feign-httpClient</code> 依赖</li><li>配置文件开启 <code>httpClient</code> 功能，设置连接池参数</li></ol></li></ol><h2 id="_2-4-最佳实践" tabindex="-1"><a class="header-anchor" href="#_2-4-最佳实践" aria-hidden="true">#</a> 2.4 最佳实践</h2><blockquote><p>所谓最佳实践，就是使用过程中总结的经验，最好的一种使用方式。自习观察可以发现，<code>Feign</code> 的客户端与服务提供者的 <code>controller</code> 代码非常相似</p></blockquote><p><code>feign</code>客户端：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714190542730.png" alt="image-20210714190542730"></p><p><code>UserController</code>：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714190528450.png" alt="image-20210714190528450"></p><p>有没有一种办法简化这种重复的代码编写呢？</p><h3 id="_2-4-1-继承方式" tabindex="-1"><a class="header-anchor" href="#_2-4-1-继承方式" aria-hidden="true">#</a> 2.4.1 继承方式</h3><p>一样的代码可以通过继承来共享：</p><ol><li><p>定义一个 <code>API</code> 接口，利用定义方法，并基于 <code>SpringMVC</code> 注解做声明</p></li><li><p><code>Feign</code> 客户端和 <code>Controller</code> 都集成改接口</p></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714190640857.png" alt="image-20210714190640857"></p><p>优点：</p><ul><li>简单</li><li>实现了代码共享</li></ul><p>缺点：</p><ul><li><p>服务提供方、服务消费方紧耦合</p></li><li><p>参数列表中的注解映射并不会继承，因此 <code>Controller</code> 中必须再次声明方法、参数列表、注解</p></li></ul><h3 id="_2-4-2-抽取方式" tabindex="-1"><a class="header-anchor" href="#_2-4-2-抽取方式" aria-hidden="true">#</a> 2.4.2 抽取方式</h3><p>将 <code>Feign</code> 的 <code>Client</code> 抽取为独立模块，并且把接口有关的 <code>POJO</code>、默认的 <code>Feign</code> 配置都放到这个模块中，提供给所有消费者使用。</p><p>例如，将 <code>UserClient</code>、<code>User</code>、<code>Feign</code> 的默认配置都抽取到一个 <code>feign-api</code> 包中，所有微服务引用该依赖包，即可直接使用。</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714214041796.png" alt="image-20210714214041796"></p><h3 id="_2-4-3-实现基于抽取的最佳实践" tabindex="-1"><a class="header-anchor" href="#_2-4-3-实现基于抽取的最佳实践" aria-hidden="true">#</a> 2.4.3 实现基于抽取的最佳实践</h3><h4 id="_1、抽取" tabindex="-1"><a class="header-anchor" href="#_1、抽取" aria-hidden="true">#</a> 1、抽取</h4><p>首先创建一个 <code>module</code>，命名为 <code>feign-api</code>：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714204557771.png" alt="image-20210714204557771"></p><p>项目结构：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714204656214.png" alt="image-20210714204656214"></p><p>在 <code>feign-api</code> 中然后引入 <code>feign</code> 的 <code>starter</code> 依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，<code>order-service</code> 中编写的 <code>UserClient</code>、<code>User</code>、<code>DefaultFeignConfiguration</code> 都复制到 <code>feign-api</code> 项目中</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714205221970.png" alt="image-20210714205221970"></p><h4 id="_2、在order-service中使用feign-api" tabindex="-1"><a class="header-anchor" href="#_2、在order-service中使用feign-api" aria-hidden="true">#</a> 2、在order-service中使用feign-api</h4><p>首先，删除 <code>order-service</code> 中的 <code>UserClient</code>、<code>User</code>、<code>DefaultFeignConfiguration</code> 等类或接口。</p><p>在 <code>order-service</code> 的 <code>pom</code> 文件中中引入 <code>feign-api</code> 的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.jmcoding.demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 <code>order-service</code> 中的所有与上述三个组件有关的导包部分，改成导入 <code>feign-api</code> 中的包</p><h4 id="_3、重启测试" tabindex="-1"><a class="header-anchor" href="#_3、重启测试" aria-hidden="true">#</a> 3、重启测试</h4><p>重启后，发现服务报错了：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714205623048.png" alt="image-20210714205623048"></p><p>这是因为 <code>UserClient</code> 现在在 <code>com.jmcoding.feign.clients</code> 包下，而 <code>order-service</code> 的 <code>@EnableFeignClients</code> 注解是在 <code>com.jmcoding.order</code> 包下，不在同一个包，无法扫描到 <code>UserClient</code></p><h4 id="_4、解决扫描包问题" tabindex="-1"><a class="header-anchor" href="#_4、解决扫描包问题" aria-hidden="true">#</a> 4、解决扫描包问题</h4><p>方式一：指定 <code>Feign</code> 应该扫描的包（这个包下的所有客户端都会加载）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.jmcoding.feign.clients&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方式二：指定需要加载的 <code>Client</code> 接口（精准定位，推荐使用这个，不会造成资源浪费）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>clients <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">UserClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="_3-gateway服务网关" tabindex="-1"><a class="header-anchor" href="#_3-gateway服务网关" aria-hidden="true">#</a> 3. Gateway服务网关</h1><blockquote><p><code>Spring Cloud Gateway</code> 是 <code>Spring Cloud</code> 的一个全新项目，该项目是基于 <code>Spring 5.0</code>，<code>Spring Boot 2.0</code> 和 <code>Project Reactor</code> 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式</p></blockquote><h2 id="_3-1-为什么需要网关" tabindex="-1"><a class="header-anchor" href="#_3-1-为什么需要网关" aria-hidden="true">#</a> 3.1 为什么需要网关</h2><blockquote><p><code>Gateway</code> 网关是我们服务的守门神，所有微服务的统一入口</p></blockquote><p>网关的<strong>核心功能特性</strong>：</p><ul><li>请求路由</li><li>权限控制</li><li>限流</li></ul><p>架构图：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714210131152.png" alt="image-20210714210131152"></p><p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p><p><strong>路由和负载均衡</strong>：一切请求都必须先经过 <code>gateway</code>，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p><p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p><p>在 <code>SpringCloud</code> 中网关的实现包括两种：</p><ul><li><code>gateway</code></li><li><code>zuul</code></li></ul><p><code>Zuul</code> 是基于 <code>Servlet</code> 的实现，属于阻塞式编程。而 <code>SpringCloudGateway</code> 则是基于 <code>Spring5</code> 中提供的<code>WebFlux</code>，属于响应式编程的实现，具备更好的性能。</p><h2 id="_3-2-gateway快速入门" tabindex="-1"><a class="header-anchor" href="#_3-2-gateway快速入门" aria-hidden="true">#</a> 3.2 gateway快速入门</h2><p>下面，我们就演示下网关的基本路由功能。基本步骤如下：</p><ol><li>创建 <code>SpringBoot</code> 工程 <code>gateway</code>，引入网关依赖</li><li>编写启动类</li><li>编写基础配置和路由规则</li><li>启动网关服务进行测试</li></ol><h3 id="_1、创建gateway服务-引入依赖" tabindex="-1"><a class="header-anchor" href="#_1、创建gateway服务-引入依赖" aria-hidden="true">#</a> 1、创建gateway服务，引入依赖</h3><p>创建服务：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714210919458.png" alt="image-20210714210919458"></p><p>引入依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--网关--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--nacos服务发现依赖--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、编写启动类" tabindex="-1"><a class="header-anchor" href="#_2、编写启动类" aria-hidden="true">#</a> 2、编写启动类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jmcoding<span class="token punctuation">.</span>gateway</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayApplication</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GatewayApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、编写基础配置和路由规则" tabindex="-1"><a class="header-anchor" href="#_3、编写基础配置和路由规则" aria-hidden="true">#</a> 3、编写基础配置和路由规则</h3><p>创建 <code>application.yml</code> 文件，内容如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10010</span> <span class="token comment"># 网关端口</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway <span class="token comment"># 服务名称</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># nacos地址</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span> <span class="token comment"># 网关路由配置</span>
        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service <span class="token comment"># 路由id，自定义，只要唯一即可</span>
          <span class="token comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span>
          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//userservice <span class="token comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span>
          <span class="token key atrule">predicates</span><span class="token punctuation">:</span> <span class="token comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span>
            <span class="token punctuation">-</span> Path=/user/<span class="token important">**</span> <span class="token comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将符合<code>Path</code> 规则的一切请求，都代理到 <code>uri</code>参数指定的地址。</p><p>本例中，我们将 <code>/user/**</code>开头的请求，代理到<code>lb://userservice</code>，<code>lb</code> 是负载均衡，根据服务名拉取服务列表，实现负载均衡。</p><h3 id="_4、重启测试" tabindex="-1"><a class="header-anchor" href="#_4、重启测试" aria-hidden="true">#</a> 4、重启测试</h3><p>重启网关，访问<a href="http://localhost:10010/user/1%E6%97%B6%EF%BC%8C%E7%AC%A6%E5%90%88%60/user/**%60%E8%A7%84%E5%88%99%EF%BC%8C%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%88%B0uri%EF%BC%9Ahttp://userservice/user/1%EF%BC%8C%E5%BE%97%E5%88%B0%E4%BA%86%E7%BB%93%E6%9E%9C%EF%BC%9A" target="_blank" rel="noopener noreferrer">http://localhost:10010/user/1时，符合\`/user/**\`规则，请求转发到uri：http://userservice/user/1，得到了结果：`);
  _push(ssrRenderComponent(_component_ExternalLinkIcon, null, null, _parent));
  _push(`</a></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714211908341.png" alt="image-20210714211908341"></p><h3 id="_5、网关路由的流程图" tabindex="-1"><a class="header-anchor" href="#_5、网关路由的流程图" aria-hidden="true">#</a> 5、网关路由的流程图</h3><p>整个访问的流程如下：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714211742956.png" alt="image-20210714211742956"></p><h3 id="_6、总结" tabindex="-1"><a class="header-anchor" href="#_6、总结" aria-hidden="true">#</a> 6、总结</h3><p>网关搭建步骤：</p><ol><li><p>创建项目，引入 <code>nacos</code> 服务发现和 <code>gateway</code> 依赖</p></li><li><p>配置 <code>application.yml</code>，包括服务基本信息、<code>nacos</code> 地址、路由</p></li></ol><p>路由配置包括：</p><ol><li><p>路由id：路由的唯一标示</p></li><li><p>路由目标（<code>uri</code>）：路由的目标地址，<code>http</code> 代表固定地址，<code>lb</code> 代表根据服务名负载均衡</p></li><li><p>路由断言（<code>predicates</code>）：判断路由的规则，</p></li><li><p>路由过滤器（<code>filters</code>）：对请求或响应做处理</p></li></ol><blockquote><p>接下来，就重点来学习路由断言和路由过滤器的详细知识</p></blockquote><h2 id="_3-3-断言工厂" tabindex="-1"><a class="header-anchor" href="#_3-3-断言工厂" aria-hidden="true">#</a> 3.3 断言工厂</h2><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被 <code>Predicate Factory</code> 读取并处理，转变为路由判断的条件</p><p>例如 <code>Path=/user/**</code> 是按照路径匹配，这个规则是由</p><p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来</p><p>处理的，像这样的断言工厂在 <code>SpringCloudGateway</code> 还有十几个：</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>- After=2037-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>- Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>- Between=2037-01-20T17:42:47.789-07:00[America/Denver], 2037-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie=chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header=X-Request-Id, \\d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>- Host=<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method=GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path=/red/{segment},/blue/**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query=name, Jack或者- Query=name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr=192.168.1.1/24</td></tr><tr><td>Weight</td><td>权重处理</td><td></td></tr></tbody></table><blockquote><p>我们只需要掌握 <code>Path</code> 这种路由工程就可以了</p></blockquote><h2 id="_3-4-过滤器工厂" tabindex="-1"><a class="header-anchor" href="#_3-4-过滤器工厂" aria-hidden="true">#</a> 3.4 过滤器工厂</h2><p><code>GatewayFilter</code> 是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714212312871.png" alt="image-20210714212312871"></p><h3 id="_3-4-1-路由过滤器的种类" tabindex="-1"><a class="header-anchor" href="#_3-4-1-路由过滤器的种类" aria-hidden="true">#</a> 3.4.1 路由过滤器的种类</h3><p><code>Spring</code> 提供了31种不同的路由过滤器工厂。例如：</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr><tr><td>...</td><td>...</td></tr></tbody></table><h3 id="_3-4-2-请求头过滤器" tabindex="-1"><a class="header-anchor" href="#_3-4-2-请求头过滤器" aria-hidden="true">#</a> 3.4.2 请求头过滤器</h3><p>下面我们以 <code>AddRequestHeader</code> 为例来讲解。</p><blockquote><p><strong>需求</strong>：给所有进入 <code>userservice</code> 的请求添加一个请求头：<code>Truth=jmcoding is freaking awesome!</code></p></blockquote><p>只需要修改 <code>gateway</code> 服务的 <code>application.yml</code> 文件，添加路由过滤即可：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service 
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//userservice 
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span> 
        <span class="token punctuation">-</span> Path=/user/<span class="token important">**</span> 
        <span class="token key atrule">filters</span><span class="token punctuation">:</span> <span class="token comment"># 过滤器</span>
        <span class="token punctuation">-</span> AddRequestHeader=Truth<span class="token punctuation">,</span> jmcoding is freaking awesome<span class="token tag">!</span> <span class="token comment"># 添加请求头</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当前过滤器写在 <code>userservice</code> 路由下，因此仅仅对访问 <code>userservice</code> 的请求有效</p></blockquote><h3 id="_3-4-3-默认过滤器" tabindex="-1"><a class="header-anchor" href="#_3-4-3-默认过滤器" aria-hidden="true">#</a> 3.4.3 默认过滤器</h3><p>如果要对所有的路由都生效，则可以将过滤器工厂写到 <code>default</code> 下。格式如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service 
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//userservice 
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span> 
        <span class="token punctuation">-</span> Path=/user/<span class="token important">**</span>
      <span class="token key atrule">default-filters</span><span class="token punctuation">:</span> <span class="token comment"># 默认过滤项</span>
      <span class="token punctuation">-</span> AddRequestHeader=Truth<span class="token punctuation">,</span> jmcoding is freaking awesome<span class="token tag">!</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-4-总结" tabindex="-1"><a class="header-anchor" href="#_3-4-4-总结" aria-hidden="true">#</a> 3.4.4 总结</h3><p>过滤器的作用是什么？</p><p>① 对路由的请求或响应做加工处理，比如添加请求头</p><p>② 配置在路由下的过滤器只对当前路由的请求生效</p><p><code>defaultFilters</code> 的作用是什么？</p><p>① 对所有路由都生效的过滤器</p><h2 id="_3-5-全局过滤器" tabindex="-1"><a class="header-anchor" href="#_3-5-全局过滤器" aria-hidden="true">#</a> 3.5 全局过滤器</h2><blockquote><p>上一节学习的过滤器，网关提供了31种，但每一种过滤器的作用都是固定的。如果我们希望拦截请求，做自己的业务逻辑则没办法实现</p></blockquote><h3 id="_3-5-1-全局过滤器作用" tabindex="-1"><a class="header-anchor" href="#_3-5-1-全局过滤器作用" aria-hidden="true">#</a> 3.5.1 全局过滤器作用</h3><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与 <code>GatewayFilter</code> 的作用一样。区别在于 <code>GatewayFilter</code> 通过配置定义，处理逻辑是固定的；而 <code>GlobalFilter</code> 的逻辑需要自己写代码实现。</p><p>定义方式是实现 <code>GlobalFilter</code> 接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GlobalFilter</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     *  处理当前请求，有必要的话通过<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">GatewayFilterChain</span></span><span class="token punctuation">}</span>将请求交给下一个过滤器处理
     *
     * <span class="token keyword">@param</span> <span class="token parameter">exchange</span> 请求上下文，里面可以获取Request、Response等信息
     * <span class="token keyword">@param</span> <span class="token parameter">chain</span> 用来把请求委托给下一个过滤器 
     * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span></span></span><span class="token punctuation">}</span> 返回标示当前过滤器业务结束
     */</span>
    <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>filter</code> 中编写自定义逻辑，可以实现下列功能：</p><ul><li>登录状态判断</li><li>权限校验</li><li>请求限流等</li></ul><h3 id="_3-5-2-自定义全局过滤器" tabindex="-1"><a class="header-anchor" href="#_3-5-2-自定义全局过滤器" aria-hidden="true">#</a> 3.5.2 自定义全局过滤器</h3><p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p><ul><li><p>参数中是否有 <code>authorization</code></p></li><li><p><code>authorization</code>参数值是否为 <code>admin</code></p></li></ul><p>如果同时满足则放行，否则拦截</p><p>实现：</p><p>在 <code>gateway</code> 中定义一个过滤器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>jmcoding<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filters</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GatewayFilterChain</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GlobalFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Order</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerWebExchange</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizeFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.获取请求参数</span>
        <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.获取authorization参数</span>
        <span class="token class-name">String</span> auth <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">&quot;authorization&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.校验</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 放行</span>
            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 4.拦截</span>
        <span class="token comment">// 4.1.禁止访问，设置状态码</span>
        exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">FORBIDDEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.2.结束处理</span>
        <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-3-过滤器执行顺序" tabindex="-1"><a class="header-anchor" href="#_3-5-3-过滤器执行顺序" aria-hidden="true">#</a> 3.5.3 过滤器执行顺序</h3><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、<code>DefaultFilter</code>、<code>GlobalFilter</code></p><p>请求路由后，会将当前路由过滤器和 <code>DefaultFilter</code> 、<code>GlobalFilter</code>，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714214228409.png" alt="image-20210714214228409"></p><p>排序的规则是什么呢？</p><ul><li>每一个过滤器都必须指定一个 <code>int</code> 类型的 <code>order</code> 值，<strong><code>order</code> 值越小，优先级越高，执行顺序越靠前</strong>。</li><li><code>GlobalFilter</code> 通过实现 <code>Ordered</code> 接口，或者添加 <code>@Order</code> 注解来指定 <code>order</code> 值，由我们自己指定</li><li>路由过滤器和 <code>defaultFilter</code> 的 <code>order</code> 由 <code>Spring</code> 指定，默认是按照声明顺序从1递增。</li><li>当过滤器的 <code>order</code> 值一样时，会按照 <code>defaultFilter</code> &gt; 路由过滤器 &gt; <code>GlobalFilter</code> 的顺序执行。</li></ul><p>详细内容，可以查看源码：</p><p><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()</code>方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。</p><p><code>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()</code>方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链</p><h2 id="_3-6-跨域问题" tabindex="-1"><a class="header-anchor" href="#_3-6-跨域问题" aria-hidden="true">#</a> 3.6 跨域问题</h2><h3 id="_3-6-1-什么是跨域问题" tabindex="-1"><a class="header-anchor" href="#_3-6-1-什么是跨域问题" aria-hidden="true">#</a> 3.6.1 什么是跨域问题</h3><p>跨域：域名不一致就是跨域，主要包括：</p><ul><li><p>域名不同： <a href="http://www.taobao.com" target="_blank" rel="noopener noreferrer">www.taobao.com`);
  _push(ssrRenderComponent(_component_ExternalLinkIcon, null, null, _parent));
  _push(`</a> 和 <a href="http://www.taobao.org" target="_blank" rel="noopener noreferrer">www.taobao.org`);
  _push(ssrRenderComponent(_component_ExternalLinkIcon, null, null, _parent));
  _push(`</a> 和 <a href="http://www.jd.com" target="_blank" rel="noopener noreferrer">www.jd.com`);
  _push(ssrRenderComponent(_component_ExternalLinkIcon, null, null, _parent));
  _push(`</a> 和 <a href="http://miaosha.jd.com" target="_blank" rel="noopener noreferrer">miaosha.jd.com`);
  _push(ssrRenderComponent(_component_ExternalLinkIcon, null, null, _parent));
  _push(`</a></p></li><li><p>域名相同，端口不同：<code>localhost:8080</code> 和 <code>localhost:8081</code></p></li></ul><p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域 <code>ajax</code> 请求，请求被浏览器拦截的问题</p><p>解决方案：<code>CORS</code>，这个以前应该学习过，这里不再赘述了。不知道的小伙伴可以查看<a href="https://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener noreferrer">https://www.ruanyifeng.com/blog/2016/04/cors.html`);
  _push(ssrRenderComponent(_component_ExternalLinkIcon, null, null, _parent));
  _push(`</a></p><h3 id="_3-6-2-模拟跨域问题" tabindex="-1"><a class="header-anchor" href="#_3-6-2-模拟跨域问题" aria-hidden="true">#</a> 3.6.2 模拟跨域问题</h3><p>找到课前资料的页面文件：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714215713563.png" alt="image-20210714215713563"></p><p>放入 <code>tomcat</code> 或者 <code>nginx</code> 这样的 <code>web</code> 服务器中，启动并访问。</p><p>可以在浏览器控制台看到下面的错误：</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1273/image-20210714215832675.png" alt="image-20210714215832675"></p><p>从 <code>localhost:8090</code> 访问 <code>localhost:10010</code>，端口不同，显然是跨域的请求。</p><h3 id="_3-6-3-解决跨域问题" tabindex="-1"><a class="header-anchor" href="#_3-6-3-解决跨域问题" aria-hidden="true">#</a> 3.6.3 解决跨域问题</h3><p>在 <code>gateway</code> 服务的 <code>application.yml</code> 文件中，添加下面的配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token comment"># 。。。</span>
      <span class="token key atrule">globalcors</span><span class="token punctuation">:</span> <span class="token comment"># 全局的跨域处理</span>
        <span class="token key atrule">add-to-simple-url-handler-mapping</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 解决options请求被拦截问题</span>
        <span class="token key atrule">corsConfigurations</span><span class="token punctuation">:</span>
          <span class="token key atrule">&#39;[/**]&#39;</span><span class="token punctuation">:</span>
            <span class="token key atrule">allowedOrigins</span><span class="token punctuation">:</span> <span class="token comment"># 允许哪些网站的跨域请求 </span>
              <span class="token punctuation">-</span> <span class="token string">&quot;http://localhost:8090&quot;</span>
            <span class="token key atrule">allowedMethods</span><span class="token punctuation">:</span> <span class="token comment"># 允许的跨域ajax的请求方式</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;GET&quot;</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;POST&quot;</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;DELETE&quot;</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;PUT&quot;</span>
              <span class="token punctuation">-</span> <span class="token string">&quot;OPTIONS&quot;</span>
            <span class="token key atrule">allowedHeaders</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span> <span class="token comment"># 允许在请求中携带的头信息</span>
            <span class="token key atrule">allowCredentials</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否允许携带cookie</span>
            <span class="token key atrule">maxAge</span><span class="token punctuation">:</span> <span class="token number">360000</span> <span class="token comment"># 这次跨域检测的有效期</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("../pages/codenotes/framework/MicroServices/SpringCloud02.html.vue");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const SpringCloud02_html = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender], ["__file", "SpringCloud02.html.vue"]]);
export {
  SpringCloud02_html as default
};
